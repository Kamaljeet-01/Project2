// JenkinsFile
pipeline {
    // Correctly define the agent for the entire pipeline
    agent {
        docker {
            image 'abhishekf5/maven-abhishek-docker-agent:v1'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
        }
    }

    // Tools are defined at the pipeline level, available to all stages
    tools {
        jdk 'JDK17_for_Sonar'
        // Assuming 'M3' is your Maven tool name configured in Jenkins
        maven 'M3'
    }

    // This is the mandatory 'stages' section, correctly placed within the pipeline block
    stages {
        stage('Checkout') {
            steps {
                sh 'echo "Starting Checkout Stage..."'
                // Ensure your Git repository is checked out here.
                // If this Jenkinsfile is in the repo, Jenkins typically checks it out automatically.
                // If not, uncomment and adjust the git step:
                // git branch: 'main', url: 'https://github.com/iam-veeramalla/Jenkins-Zero-To-Hero.git'
            }
        }

        stage('Build and Test') {
            steps {
                sh 'ls -ltr'
                // build the project and create a JAR file
                sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
            }
        }

        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://13.233.186.206:9000"
            }
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
                }
            }
        }

        // Add the Quality Gate Check stage as a best practice
        stage('Quality Gate Check') {
            steps {
                timeout(time: 1, unit: 'HOURS') { // Adjust timeout as needed
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "abhishekf5/ultimate-cicd:${BUILD_NUMBER}"
                // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile" // This is usually relative to context
                // REGISTRY_CREDENTIALS = credentials('docker-cred') // This isn't needed directly if using docker.withRegistry
            }
            steps {
                script {
                    sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    // Ensure 'docker-cred' is a 'Username with password' credential in Jenkins
                    // where username is your Docker Hub username and password is your token/password
                    docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                        dockerImage.push()
                    }
                }
            }
        }

        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
                GIT_USER_NAME = "iam-veeramalla"
            }
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        git config user.email "abhishek.xyz@gmail.com"
                        git config user.name "Abhishek Veeramalla"
                        # BUILD_NUMBER is already an environment variable, no need to re-declare
                        sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                        git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                        git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                    '''
                }
            }
        }
    }

    // Post-build actions (optional, but good for cleanup and notifications)
    post {
        always {
            cleanWs() // Clean up workspace
            echo "Pipeline finished."
        }
        failure {
            echo "Pipeline failed! Check logs for details."
            // Add notification steps here, e.g., mail to 'devs@example.com'
        }
        success {
            echo "Pipeline succeeded!"
        }
    }
}
